// Generated by CoffeeScript 1.7.1
(function() {
  var ChildProcess, Github, argv, config, fs, github, logger, processIssues, winston;

  fs = require('fs');

  ChildProcess = require('child_process');

  Github = require('github');

  winston = require('winston');

  argv = require('optimist')["default"]('c', 'config.json').argv;

  logger = new winston.Logger({
    transports: [
      new winston.transports.Console({
        handleExceptions: true,
        level: 'info',
        prettyPrint: true,
        colorize: true,
        timestamp: true
      })
    ],
    exitOnError: false,
    levels: {
      info: 0,
      warn: 1,
      error: 3
    },
    colors: {
      info: 'green',
      warn: 'yellow',
      error: 'red'
    }
  });

  if (!fs.existsSync(argv.c)) {
    process.exit(1);
  }

  config = JSON.parse(fs.readFileSync(argv.c));

  github = new Github({
    version: '3.0.0'
  });

  github.authenticate({
    username: config.username,
    password: config.password,
    type: 'basic'
  });

  processIssues = function(issues, repo) {
    var issue, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = issues.length; _i < _len; _i++) {
      issue = issues[_i];
      logger.info("found deploy issue " + repo.user + "/" + repo.name + "/issues/" + issue.number);
      logger.info("assigning to self(" + config.username + ")");
      github.issues.edit({
        user: repo.user,
        repo: repo.name,
        number: issue.number,
        assignee: config.username
      });
      logger.info("posting a comment");
      github.issues.createComment({
        user: repo.user,
        repo: repo.name,
        number: issue.number,
        body: '收到, 正在准备上线...'
      });
      _results.push(ChildProcess.exec(repo.command, function(err, result, error) {
        var body;
        body = '';
        if (err) {
          body += "上线过程遇到了错误, 请尝试修复它, 我将在五分钟后再次尝试上线一次\n\n";
          if (result.length > 0) {
            body += "## 控制台输出\n```\n" + result + "\n```\n\n";
          }
          if (error.length > 0) {
            body += "## 错误输出\n```\n" + error + "\n```\n\n";
          }
          logger.error(err);
        } else {
          body += "上线成功\n\n";
          if (result.length > 0) {
            body += "## 控制台输出\n```\n" + result + "\n```\n\n";
          }
          github.issues.edit({
            user: repo.user,
            repo: repo.name,
            number: issue.number,
            state: 'closed'
          });
        }
        return github.issues.createComment({
          user: repo.user,
          repo: repo.name,
          number: issue.number,
          body: body
        });
      }));
    }
    return _results;
  };

  setInterval(function() {
    var repo, _i, _len, _ref, _results;
    _ref = config.repos;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      _results.push((function(repo) {
        logger.info("fetching repo " + repo.name);
        return github.issues.repoIssues({
          user: repo.user,
          repo: repo.name,
          labels: repo.labels,
          state: 'open',
          assignee: 'none'
        }, function(err, issues) {
          return processIssues(issues, repo);
        });
      })(repo));
    }
    return _results;
  }, 15000);

}).call(this);
